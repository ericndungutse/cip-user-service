name: Backend CI with Docker Multi-Platform Build

on:
  # Trigger on all branches for push events (commits)
  push:
    branches: ["*"]

  # Trigger on pull requests to any branch
  pull_request:
    branches: ["*"]

  # Trigger on merge events (when PR is merged)
  merge_group:

jobs:
  backend-ci:
    name: Backend CI Pipeline with Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Java source files
        id: check-java
        run: |
          # Check if there are any Java files in the repository
          JAVA_FILES=$(find . -name "*.java" -type f | head -5)

          if [ -z "$JAVA_FILES" ]; then
            echo "‚ö†Ô∏è No Java source files found in repository"
            echo "‚úÖ Skipping Java build steps - repository not yet initialized with Java code"
            echo "has_java=false" >> $GITHUB_OUTPUT
          else
            echo "‚òï Java source files found:"
            echo "$JAVA_FILES"
            echo "‚úÖ Proceeding with Java build pipeline"
            echo "has_java=true" >> $GITHUB_OUTPUT
          fi

      - name: Early success for non-Java repositories
        if: steps.check-java.outputs.has_java == 'false'
        run: |
          echo "üéâ CI passed successfully!"
          echo "‚úÖ Repository validated (no Java code found - this is expected for new repositories)"
          echo "‚úÖ Ready for Java development"
          exit 0

      - name: Set up JDK 21
        if: steps.check-java.outputs.has_java == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Run unit tests with JaCoCo (no packaging)
        if: steps.check-java.outputs.has_java == 'true'
        run: |
          # Run tests + generate JaCoCo report without modifying pom.xml by invoking plugin directly
            mvn -B -q org.jacoco:jacoco-maven-plugin:prepare-agent test org.jacoco:jacoco-maven-plugin:report
          # Ensure report exists
          if [ ! -f target/site/jacoco/jacoco.xml ]; then echo "JaCoCo report missing"; exit 1; fi

      - name: Upload backend test artifacts
        if: always() && steps.check-java.outputs.has_java == 'true'
        run: |
          set -e
          mkdir -p ci-artifacts/backend
          if ls target/surefire-reports/*.xml >/dev/null 2>&1; then cp target/surefire-reports/*.xml ci-artifacts/backend/; fi
          [ -f target/site/jacoco/jacoco.xml ] && cp target/site/jacoco/jacoco.xml ci-artifacts/backend/
          if [ -d target/site/jacoco ]; then tar -czf ci-artifacts/backend/jacoco-html.tar.gz -C target/site jacoco; fi

      - name: Store backend artifacts
        if: always() && steps.check-java.outputs.has_java == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-and-coverage
          path: ci-artifacts/backend
          if-no-files-found: ignore

      - name: Annotate backend test results
        if: always() && steps.check-java.outputs.has_java == 'true'
        uses: dorny/test-reporter@v1
        with:
          name: Backend Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Backend coverage summary
        if: always() && steps.check-java.outputs.has_java == 'true'
        run: |
          echo "## Backend Test Summary" >> $GITHUB_STEP_SUMMARY
          if ls target/surefire-reports/*.xml >/dev/null 2>&1; then
            TOTAL=$(grep -h '<testsuite' target/surefire-reports/*.xml | awk -F'tests="' '{print $2}' | cut -d '"' -f1 | awk '{s+=$1} END {print s+0}')
            FAIL=$(grep -h '<testsuite' target/surefire-reports/*.xml | awk -F'failures="' '{print $2}' | cut -d '"' -f1 | awk '{s+=$1} END {print s+0}')
            echo "Tests: $TOTAL, Failures: $FAIL" >> $GITHUB_STEP_SUMMARY
          else
            echo "No surefire XML reports" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f target/site/jacoco/jacoco.xml ]; then
            LINE_COVERED=$(grep '<counter type="LINE"' target/site/jacoco/jacoco.xml | head -1 | sed -E 's/.*covered="([0-9]+)".*$/\1/')
            LINE_MISSED=$(grep '<counter type="LINE"' target/site/jacoco/jacoco.xml | head -1 | sed -E 's/.*missed="([0-9]+)".*$/\1/')
            TOTAL=$((LINE_COVERED + LINE_MISSED))
            if [ "$TOTAL" -gt 0 ]; then PCT=$(awk -v c=$LINE_COVERED -v t=$TOTAL 'BEGIN{printf("%.2f", (c/t)*100)}'); else PCT=0; fi
            echo "Coverage (lines): $PCT% ($LINE_COVERED/$TOTAL)" >> $GITHUB_STEP_SUMMARY
          else
            echo "No jacoco.xml" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Decrypt environment variables (post-tests, optional)
        if: steps.check-java.outputs.has_java == 'true'
        id: decrypt-env
        run: |
          echo "üîç Checking for encrypted environment files (after tests)..."
          cleanup() { rm -f ./team-private-key.pem ./temp-aes-key ./.env; }
          trap cleanup EXIT
          ENCRYPTED_DATA=$(find . -maxdepth 1 -name "encrypted-env-vars.enc" -type f | head -1)
            ENCRYPTED_KEY=$(find . -maxdepth 1 -name "encrypted-aes-key.enc" -type f | head -1)
          if [[ -z "$ENCRYPTED_DATA" || -z "$ENCRYPTED_KEY" ]]; then echo "No encrypted env files - skipping"; echo "has_encrypted_env=false" >> $GITHUB_OUTPUT; exit 0; fi
          echo "${{ secrets.TEAM_PRIVATE_KEY }}" > ./team-private-key.pem; chmod 600 ./team-private-key.pem
          openssl rsautl -decrypt -inkey ./team-private-key.pem -in "$ENCRYPTED_KEY" -out ./temp-aes-key
          AES_KEY=$(cat ./temp-aes-key)
          if ! openssl enc -aes-256-gcm -d -in "$ENCRYPTED_DATA" -out "./.env" -pass "pass:$AES_KEY" 2>/dev/null; then
            openssl enc -aes-256-cbc -d -in "$ENCRYPTED_DATA" -out "./.env" -pass "pass:$AES_KEY" 2>/dev/null || { echo "Decrypt failed"; exit 1; }
          fi
          if [[ -f ./.env ]]; then echo ".env" >> .gitignore; git add .gitignore 2>/dev/null || true; fi
          echo "has_encrypted_env=true" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.check-java.outputs.has_java == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Check for pom.xml
        if: steps.check-java.outputs.has_java == 'true'
            echo "‚úÖ Ready for deployment / push (runtime container test skipped)"
            echo "‚ÑπÔ∏è Add runtime smoke tests or integration tests before pushing to registry"
            echo "‚ùå pom.xml not found - Maven project required"
            exit 1
          fi
          echo "‚úÖ Maven pom.xml found"

      - name: Validate Maven project structure
        if: steps.check-java.outputs.has_java == 'true'
        run: |
          # Check for src directory structure
          if [ ! -d "src/main/java" ]; then
            echo "‚ùå src/main/java directory not found"
            exit 1
          fi
          echo "‚úÖ Maven project structure validated"

      - name: Check for Spring Boot application
        if: steps.check-java.outputs.has_java == 'true'
        run: |
          # Look for Spring Boot indicators
          if grep -q "spring-boot" pom.xml; then
            echo "‚úÖ Spring Boot project detected"
          else
            echo "‚ö†Ô∏è Spring Boot dependencies not found in pom.xml"
          fi

      - name: Build multi-platform Docker image
        if: steps.check-java.outputs.has_java == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            cloudinsight-backend:latest
            cloudinsight-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64

      - name: Validate application properties
        if: steps.check-java.outputs.has_java == 'true'
        run: |
          # Check for application configuration
          if [ -f "src/main/resources/application.properties" ] || [ -f "src/main/resources/application.yml" ] || [ -f "src/main/resources/application.yaml" ]; then
            echo "‚úÖ Application configuration found"
          else
            echo "‚ö†Ô∏è No application.properties/yml found (using Spring Boot defaults)"
          fi

      - name: Check for tests
        if: steps.check-java.outputs.has_java == 'true'
        run: |
          # Check if there are any test files
          TEST_FILES=$(find src/test -name "*.java" -type f 2>/dev/null | head -5)

          if [ -z "$TEST_FILES" ]; then
            echo "‚ö†Ô∏è No test files found in src/test"
          else
            echo "‚úÖ Test files found:"
            echo "$TEST_FILES"
          fi

      - name: Final validation
        if: steps.check-java.outputs.has_java == 'true'
        run: |
          echo "üéâ All CI checks passed successfully!"
          echo "‚úÖ Java project structure validated"
          echo "‚úÖ Tests executed prior to Docker build"
          echo "‚úÖ Multi-platform Docker image built"
          if [ -f target/site/jacoco/jacoco.xml ]; then
            LINE_COVERED=$(grep '<counter type="LINE"' target/site/jacoco/jacoco.xml | head -1 | sed -E 's/.*covered="([0-9]+)".*$/\1/')
            LINE_MISSED=$(grep '<counter type="LINE"' target/site/jacoco/jacoco.xml | head -1 | sed -E 's/.*missed="([0-9]+)".*$/\1/')
            TOTAL=$((LINE_COVERED + LINE_MISSED))
            if [ "$TOTAL" -gt 0 ]; then PCT=$(awk -v c=$LINE_COVERED -v t=$TOTAL 'BEGIN{printf("%.2f", (c/t)*100)}'); else PCT=0; fi
            echo "üìä Line coverage: $PCT% ($LINE_COVERED/$TOTAL)"; else echo "üìä Line coverage: n/a"; fi
          echo "‚úÖ Ready for deployment / push (runtime container test skipped)"
          echo "‚ÑπÔ∏è Add runtime smoke tests or integration tests before pushing to registry"
